#########################BEGIN-PROLOG#########################
JobId             = 1774859
ArrayJobId        = 1774855
ArrayTaskId       = 3
ArrayTaskThrottle = 6
JobName           = clustering
UserId            = zhaok220(20487)
GroupId           = zhaok220(20487)
MCS_label         = N/A
Priority          = 92
Nice              = 0
Account           = khurigrp
QOS               = normal
Requeue           = 1
Restarts          = 0
BatchFlag         = 1
Reboot            = 0
ExitCode          = 0:0
RunTime           = 00:00:00
TimeLimit         = 7-00:00:00
TimeMin           = N/A
SubmitTime        = 2022-07-08T14:20:55
EligibleTime      = 2022-07-08T14:20:56
AccrueTime        = Unknown
StartTime         = 2022-07-08T14:20:56
EndTime           = 2022-07-15T14:20:56
Deadline          = N/A
Partition         = medium
AllocNode:Sid     = gemini:189140
NodeList          = comp-05-6
BatchHost         = comp-05-6
NumNodes          = 1
NumCPUs           = 1
NumTasks          = 1
CPUs/Task         = 1
ReqB:S:C:T        = 0:0:*:*
TRES=cpu=1,mem=64G,node=1,billing= cpu=1,mem=64G,node=1,billing=1
Socks/Node        = *
NtasksPerN:B:S:C  = 1:0:*:*
CoreSpec          = *
MinCPUsNode       = 1
MinMemoryNode     = 64G
MinTmpDiskNode    = 0
Command           = /deac/csc/khuriGrp/zhaok220/clustering/slurm/clustering_mul.slurm
WorkDir           = /deac/csc/khuriGrp/zhaok220/clustering/slurm
StdErr            = /deac/csc/khuriGrp/zhaok220/clustering/slurm/clustering-1774859.e
StdOut            = /deac/csc/khuriGrp/zhaok220/clustering/slurm/clustering-1774859.o
Power             = 
MailUser          = zhaok220@wfu.edu
MailType          = BEGIN,END,FAIL
NtasksPerTRES:0   = NtasksPerTRES:0
###########################END-PROLOG#########################
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.01514577865600586 seconds
Jaccard graph constructed in 1.510554313659668 seconds
Wrote graph to binary file in 0.03225088119506836 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.876209
Louvain completed 21 runs in 0.5795836448669434 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 2.645439624786377 seconds
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.017696619033813477 seconds
Jaccard graph constructed in 1.6122515201568604 seconds
Wrote graph to binary file in 0.035959720611572266 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.873799
Louvain completed 21 runs in 0.5999438762664795 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 2.7632806301116943 seconds
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.015557289123535156 seconds
Jaccard graph constructed in 1.5703845024108887 seconds
Wrote graph to binary file in 0.032208919525146484 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.871614
After 15 runs, maximum modularity is Q = 0.872629
Louvain completed 35 runs in 0.949289083480835 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 3.0936543941497803 seconds
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.01771831512451172 seconds
Jaccard graph constructed in 1.5726606845855713 seconds
Wrote graph to binary file in 0.03583359718322754 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.879704
After 18 runs, maximum modularity is Q = 0.880791
Louvain completed 38 runs in 1.060697317123413 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 3.189265012741089 seconds
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.009237527847290039 seconds
Jaccard graph constructed in 0.9710302352905273 seconds
Wrote graph to binary file in 0.01553654670715332 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.826859
After 6 runs, maximum modularity is Q = 0.828229
After 15 runs, maximum modularity is Q = 0.829468
Louvain completed 35 runs in 0.6712758541107178 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 2.14621639251709 seconds
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.009259700775146484 seconds
Jaccard graph constructed in 0.946096658706665 seconds
Wrote graph to binary file in 0.016911983489990234 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.834593
After 2 runs, maximum modularity is Q = 0.835802
After 16 runs, maximum modularity is Q = 0.837575
Louvain completed 36 runs in 0.7252225875854492 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 2.171126365661621 seconds
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.008690834045410156 seconds
Jaccard graph constructed in 0.9946482181549072 seconds
Wrote graph to binary file in 0.01674818992614746 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.824859
After 2 runs, maximum modularity is Q = 0.828246
After 9 runs, maximum modularity is Q = 0.830278
Louvain completed 29 runs in 0.6289644241333008 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 2.1615097522735596 seconds
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.009629487991333008 seconds
Jaccard graph constructed in 0.9040274620056152 seconds
Wrote graph to binary file in 0.015820741653442383 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.819815
After 2 runs, maximum modularity is Q = 0.821576
After 8 runs, maximum modularity is Q = 0.824131
Louvain completed 28 runs in 0.5602078437805176 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.9762537479400635 seconds
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.028951644897460938 seconds
Jaccard graph constructed in 2.5273971557617188 seconds
Wrote graph to binary file in 0.06682848930358887 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.90196
After 2 runs, maximum modularity is Q = 0.90366
Louvain completed 22 runs in 1.1280639171600342 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 4.286489009857178 seconds
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.03621363639831543 seconds
Jaccard graph constructed in 2.8147408962249756 seconds
Wrote graph to binary file in 0.07732915878295898 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.902988
After 2 runs, maximum modularity is Q = 0.905006
Louvain completed 22 runs in 1.2368216514587402 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 4.65740966796875 seconds
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.028881549835205078 seconds
Jaccard graph constructed in 2.721071243286133 seconds
Wrote graph to binary file in 0.06583356857299805 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.901038
After 2 runs, maximum modularity is Q = 0.902757
Louvain completed 22 runs in 1.0904521942138672 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 4.4025163650512695 seconds
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.03102397918701172 seconds
Jaccard graph constructed in 2.5511271953582764 seconds
Wrote graph to binary file in 0.06789493560791016 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.902023
Louvain completed 21 runs in 0.9442663192749023 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 4.077837228775024 seconds
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.017827749252319336 seconds
