#########################BEGIN-PROLOG#########################
JobId             = 1783214
JobName           = clustering
UserId            = zhaok220(20487)
GroupId           = zhaok220(20487)
MCS_label         = N/A
Priority          = 92
Nice              = 0
Account           = khurigrp
QOS               = normal
Requeue           = 1
Restarts          = 0
BatchFlag         = 1
Reboot            = 0
ExitCode          = 0:0
RunTime           = 00:00:00
TimeLimit         = 7-00:00:00
TimeMin           = N/A
SubmitTime        = 2022-07-24T02:44:05
EligibleTime      = 2022-07-24T02:44:05
AccrueTime        = 2022-07-24T02:44:05
StartTime         = 2022-07-24T02:44:05
EndTime           = 2022-07-31T02:44:05
Deadline          = N/A
Partition         = medium
AllocNode:Sid     = gemini:178691
NodeList          = comp-24-4
BatchHost         = comp-24-4
NumNodes          = 1
NumCPUs           = 20
NumTasks          = 20
CPUs/Task         = 1
ReqB:S:C:T        = 0:0:*:*
TRES=cpu=20,mem=64G,node=1,billing= cpu=20,mem=64G,node=1,billing=20
Socks/Node        = *
NtasksPerN:B:S:C  = 20:0:*:*
CoreSpec          = *
MinCPUsNode       = 20
MinMemoryNode     = 64G
MinTmpDiskNode    = 0
Command           = /deac/csc/khuriGrp/zhaok220/clustering/slurm/clustering_mul.slurm
WorkDir           = /deac/csc/khuriGrp/zhaok220/clustering/slurm
StdErr            = /deac/csc/khuriGrp/zhaok220/clustering/slurm/clustering-1783214.e
StdOut            = /deac/csc/khuriGrp/zhaok220/clustering/slurm/clustering-1783214.o
Power             = 
MailUser          = zhaok220@wfu.edu
MailType          = BEGIN,END,FAIL
NtasksPerTRES:0   = NtasksPerTRES:0
###########################END-PROLOG#########################
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.011834859848022461 seconds
Jaccard graph constructed in 0.2895476818084717 seconds
Wrote graph to binary file in 0.010429143905639648 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.7859
After 19 runs, maximum modularity is Q = 0.788217
Louvain completed 39 runs in 0.7069897651672363 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.261688232421875 seconds
9
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.010574102401733398 seconds
Jaccard graph constructed in 0.2662477493286133 seconds
Wrote graph to binary file in 0.009781122207641602 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.777566
After 2 runs, maximum modularity is Q = 0.781799
After 10 runs, maximum modularity is Q = 0.783103
Louvain completed 30 runs in 0.5125119686126709 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.0399646759033203 seconds
11
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.014103174209594727 seconds
Jaccard graph constructed in 0.3587183952331543 seconds
Wrote graph to binary file in 0.03175616264343262 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.876195
After 6 runs, maximum modularity is Q = 0.877201
Louvain completed 26 runs in 0.783437967300415 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.439847469329834 seconds
19
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.017104625701904297 seconds
Jaccard graph constructed in 0.3773531913757324 seconds
Wrote graph to binary file in 0.036478281021118164 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.876547
After 8 runs, maximum modularity is Q = 0.877897
Louvain completed 28 runs in 0.9024066925048828 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.660355567932129 seconds
20
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.01653456687927246 seconds
Jaccard graph constructed in 0.3616902828216553 seconds
Wrote graph to binary file in 0.03300070762634277 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.874588
After 2 runs, maximum modularity is Q = 0.876693
Louvain completed 22 runs in 0.7430539131164551 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.4088780879974365 seconds
20
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.023381710052490234 seconds
Jaccard graph constructed in 0.3803672790527344 seconds
Wrote graph to binary file in 0.03438568115234375 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.879082
Louvain completed 21 runs in 0.6935031414031982 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.3905341625213623 seconds
21
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.012339353561401367 seconds
Jaccard graph constructed in 0.30310845375061035 seconds
Wrote graph to binary file in 0.016646862030029297 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.82505
After 2 runs, maximum modularity is Q = 0.826744
After 4 runs, maximum modularity is Q = 0.829525
Louvain completed 24 runs in 0.5484192371368408 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.1319961547851562 seconds
15
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.011422872543334961 seconds
Jaccard graph constructed in 0.3109922409057617 seconds
Wrote graph to binary file in 0.017673969268798828 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.836245
After 5 runs, maximum modularity is Q = 0.838547
Louvain completed 25 runs in 0.530590295791626 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.1297671794891357 seconds
14
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.012675046920776367 seconds
Jaccard graph constructed in 0.30544567108154297 seconds
Wrote graph to binary file in 0.01716899871826172 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.824157
After 4 runs, maximum modularity is Q = 0.82532
After 17 runs, maximum modularity is Q = 0.826546
Louvain completed 37 runs in 0.8194112777709961 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.4093961715698242 seconds
14
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.013275861740112305 seconds
Jaccard graph constructed in 0.3111574649810791 seconds
Wrote graph to binary file in 0.01749444007873535 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.818173
After 2 runs, maximum modularity is Q = 0.819247
After 3 runs, maximum modularity is Q = 0.821084
Louvain completed 23 runs in 0.5157163143157959 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.118408203125 seconds
14
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.03649425506591797 seconds
Jaccard graph constructed in 0.501969575881958 seconds
Wrote graph to binary file in 0.06157374382019043 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.900791
After 2 runs, maximum modularity is Q = 0.90356
Louvain completed 22 runs in 1.0278897285461426 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.915520429611206 seconds
26
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.03849434852600098 seconds
Jaccard graph constructed in 0.6070833206176758 seconds
Wrote graph to binary file in 0.07102155685424805 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.902968
After 8 runs, maximum modularity is Q = 0.904023
Louvain completed 28 runs in 1.369692087173462 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 2.3656866550445557 seconds
31
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.04288792610168457 seconds
Jaccard graph constructed in 0.5214426517486572 seconds
Wrote graph to binary file in 0.09789729118347168 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.903467
Louvain completed 21 runs in 0.9784989356994629 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.9123845100402832 seconds
26
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.03615236282348633 seconds
Jaccard graph constructed in 0.711578369140625 seconds
Wrote graph to binary file in 0.06333613395690918 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.900657
After 6 runs, maximum modularity is Q = 0.902084
Louvain completed 26 runs in 1.2119574546813965 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 2.3015878200531006 seconds
27
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.014867782592773438 seconds
Jaccard graph constructed in 0.37482666969299316 seconds
Wrote graph to binary file in 0.03187727928161621 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.876505
After 3 runs, maximum modularity is Q = 0.877707
Louvain completed 23 runs in 0.6588668823242188 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.3451721668243408 seconds
20
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.024318218231201172 seconds
Jaccard graph constructed in 0.4163248538970947 seconds
Wrote graph to binary file in 0.035249948501586914 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.88998
After 6 runs, maximum modularity is Q = 0.89098
Louvain completed 26 runs in 0.7881159782409668 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.5293092727661133 seconds
24
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.023349523544311523 seconds
Jaccard graph constructed in 0.3815805912017822 seconds
Wrote graph to binary file in 0.03183913230895996 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.876825
Louvain completed 21 runs in 0.5978586673736572 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.3021190166473389 seconds
22
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.025249481201171875 seconds
Jaccard graph constructed in 0.40487098693847656 seconds
Wrote graph to binary file in 0.032540321350097656 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.879425
After 2 runs, maximum modularity is Q = 0.882643
Louvain completed 22 runs in 0.7296257019042969 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.4623231887817383 seconds
21
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.03926444053649902 seconds
Jaccard graph constructed in 0.5086159706115723 seconds
Wrote graph to binary file in 0.06283998489379883 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.902614
Louvain completed 21 runs in 0.9057214260101318 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.7936468124389648 seconds
26
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.058226823806762695 seconds
Jaccard graph constructed in 0.5582177639007568 seconds
Wrote graph to binary file in 0.0732736587524414 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.908886
Louvain completed 21 runs in 1.2505927085876465 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 2.2236523628234863 seconds
28
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.04746603965759277 seconds
Jaccard graph constructed in 0.5295116901397705 seconds
Wrote graph to binary file in 0.06170916557312012 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.899751
After 5 runs, maximum modularity is Q = 0.901827
Louvain completed 25 runs in 1.1579604148864746 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 2.0734283924102783 seconds
26
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.03633737564086914 seconds
Jaccard graph constructed in 0.5217776298522949 seconds
Wrote graph to binary file in 0.06259846687316895 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.905957
Louvain completed 21 runs in 0.9303600788116455 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.833902359008789 seconds
27
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.02162623405456543 seconds
Jaccard graph constructed in 0.3922843933105469 seconds
Wrote graph to binary file in 0.03022456169128418 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.873137
After 8 runs, maximum modularity is Q = 0.874412
After 27 runs, maximum modularity is Q = 0.875663
Louvain completed 47 runs in 1.376128911972046 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 2.116467237472534 seconds
19
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.024561643600463867 seconds
Jaccard graph constructed in 0.4127345085144043 seconds
Wrote graph to binary file in 0.035123586654663086 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.88485
After 2 runs, maximum modularity is Q = 0.886818
After 5 runs, maximum modularity is Q = 0.888374
Louvain completed 25 runs in 0.8422932624816895 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.602524995803833 seconds
24
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.02189469337463379 seconds
Jaccard graph constructed in 0.39358019828796387 seconds
Wrote graph to binary file in 0.03370404243469238 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.878384
Louvain completed 21 runs in 0.5840892791748047 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.302394151687622 seconds
20
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.0288393497467041 seconds
Jaccard graph constructed in 0.4101550579071045 seconds
Wrote graph to binary file in 0.03277754783630371 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.877851
After 2 runs, maximum modularity is Q = 0.880877
Louvain completed 22 runs in 0.7037770748138428 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.456455945968628 seconds
21
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.009474039077758789 seconds
Jaccard graph constructed in 0.28223609924316406 seconds
Wrote graph to binary file in 0.022533655166625977 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.717911
Louvain completed 21 runs in 0.6531393527984619 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.2418389320373535 seconds
5
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.00905609130859375 seconds
Jaccard graph constructed in 0.27347898483276367 seconds
Wrote graph to binary file in 0.007307291030883789 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.670217
After 9 runs, maximum modularity is Q = 0.671396
Louvain completed 29 runs in 0.4786720275878906 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.0416200160980225 seconds
5
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.00928950309753418 seconds
Jaccard graph constructed in 0.271425724029541 seconds
Wrote graph to binary file in 0.005602836608886719 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.695475
Louvain completed 21 runs in 0.35550475120544434 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.068192958831787 seconds
5
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.008980035781860352 seconds
Jaccard graph constructed in 0.283203125 seconds
Wrote graph to binary file in 0.0058116912841796875 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.659547
After 18 runs, maximum modularity is Q = 0.661379
Louvain completed 38 runs in 0.5782785415649414 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.1474738121032715 seconds
6
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.009708166122436523 seconds
Jaccard graph constructed in 0.27640461921691895 seconds
Wrote graph to binary file in 0.00574946403503418 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.683604
Louvain completed 21 runs in 0.3271522521972656 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 0.8814506530761719 seconds
6
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.0097503662109375 seconds
Jaccard graph constructed in 0.2756521701812744 seconds
Wrote graph to binary file in 0.0058612823486328125 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.659852
Louvain completed 21 runs in 0.31733131408691406 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 0.8737263679504395 seconds
6
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.009489774703979492 seconds
Jaccard graph constructed in 0.26302385330200195 seconds
Wrote graph to binary file in 0.0029904842376708984 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.496807
Louvain completed 21 runs in 0.28603482246398926 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 0.8299665451049805 seconds
2
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.009795427322387695 seconds
Jaccard graph constructed in 0.26279139518737793 seconds
Wrote graph to binary file in 0.002992868423461914 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.492017
Louvain completed 21 runs in 0.2843172550201416 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 0.826059103012085 seconds
2
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.00863027572631836 seconds
Jaccard graph constructed in 0.2695808410644531 seconds
Wrote graph to binary file in 0.0034732818603515625 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.499634
Louvain completed 21 runs in 0.2864692211151123 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 0.8351495265960693 seconds
2
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.010444164276123047 seconds
Jaccard graph constructed in 0.26349449157714844 seconds
Wrote graph to binary file in 0.0036215782165527344 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.358391
Louvain completed 21 runs in 0.285123348236084 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 0.8326759338378906 seconds
3
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.010655641555786133 seconds
Jaccard graph constructed in 0.270488977432251 seconds
Wrote graph to binary file in 0.003399372100830078 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.383027
Louvain completed 21 runs in 0.30224061012268066 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 0.8583629131317139 seconds
3
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.009591817855834961 seconds
Jaccard graph constructed in 0.26479530334472656 seconds
Wrote graph to binary file in 0.003078937530517578 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.384724
Louvain completed 21 runs in 0.3271770477294922 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 0.8731670379638672 seconds
3
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.010638952255249023 seconds
Jaccard graph constructed in 0.29544734954833984 seconds
Wrote graph to binary file in 0.01040339469909668 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.783925
After 3 runs, maximum modularity is Q = 0.785604
Louvain completed 23 runs in 0.5454723834991455 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.1285786628723145 seconds
10
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.010808706283569336 seconds
Jaccard graph constructed in 0.2952768802642822 seconds
Wrote graph to binary file in 0.009567499160766602 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.793583
After 2 runs, maximum modularity is Q = 0.795808
Louvain completed 22 runs in 0.8087849617004395 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.3916404247283936 seconds
10
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.011972427368164062 seconds
Jaccard graph constructed in 0.2976400852203369 seconds
Wrote graph to binary file in 0.01395273208618164 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.786464
Louvain completed 21 runs in 0.3831949234008789 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 0.9853668212890625 seconds
10
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.010448455810546875 seconds
Jaccard graph constructed in 0.2938549518585205 seconds
Wrote graph to binary file in 0.013759136199951172 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.781758
After 5 runs, maximum modularity is Q = 0.785075
Louvain completed 25 runs in 0.7300152778625488 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.3204216957092285 seconds
9
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.011721134185791016 seconds
Jaccard graph constructed in 0.29058003425598145 seconds
Wrote graph to binary file in 0.00924062728881836 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.799363
Louvain completed 21 runs in 0.3637099266052246 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 0.9535789489746094 seconds
9
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.010619878768920898 seconds
Jaccard graph constructed in 0.2879478931427002 seconds
Wrote graph to binary file in 0.009058713912963867 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.76772
After 3 runs, maximum modularity is Q = 0.76934
After 10 runs, maximum modularity is Q = 0.770345
Louvain completed 30 runs in 0.5666553974151611 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.1406188011169434 seconds
10
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.011124134063720703 seconds
Jaccard graph constructed in 0.2981455326080322 seconds
Wrote graph to binary file in 0.009066104888916016 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.787853
After 5 runs, maximum modularity is Q = 0.791405
Louvain completed 25 runs in 0.4426686763763428 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.0290701389312744 seconds
9
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.010208606719970703 seconds
Jaccard graph constructed in 0.2977283000946045 seconds
Wrote graph to binary file in 0.010371923446655273 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.781028
After 9 runs, maximum modularity is Q = 0.783597
Louvain completed 29 runs in 0.4986000061035156 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.0871782302856445 seconds
10
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.01031637191772461 seconds
Jaccard graph constructed in 0.2904932498931885 seconds
Wrote graph to binary file in 0.01288461685180664 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.77596
After 2 runs, maximum modularity is Q = 0.779565
After 8 runs, maximum modularity is Q = 0.781252
Louvain completed 28 runs in 0.5324108600616455 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.115699052810669 seconds
9
Finding 30 nearest neighbors using minkowski metric and 'auto' algorithm
Neighbors computed in 0.012032270431518555 seconds
Jaccard graph constructed in 0.29520416259765625 seconds
Wrote graph to binary file in 0.009287595748901367 seconds
Running Louvain modularity optimization
After 1 runs, maximum modularity is Q = 0.774957
After 4 runs, maximum modularity is Q = 0.776474
Louvain completed 24 runs in 0.5888571739196777 seconds
Sorting communities by size, please wait ...
PhenoGraph completed in 1.171854019165039 seconds
10
[4, 5, 7, 7, 7, 7, 6, 5, 5, 5, 8, 10, 8, 9, 7, 8, 7, 7, 8, 9, 8, 9, 7, 8, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
/deac/csc/khuriGrp/zhaok220/clustering/data/scrna_benchmarks_umap/ICELL8_SE_A_kallisto_umap.csv
-- Begin evolution --
-- Generation 1 --
-- Generation 2 --
-- Generation 3 --
-- Generation 4 --
-- Generation 5 --
-- Generation 6 --
-- Generation 7 --
-- Generation 8 --
-- Generation 9 --
-- Generation 10 --
-- Generation 11 --
-- Generation 12 --
-- Generation 13 --
-- Generation 14 --
-- Generation 15 --
-- Generation 16 --
-- Generation 17 --
-- Generation 18 --
-- Generation 19 --
-- Generation 20 --
-- Generation 21 --
-- Generation 22 --
-- Generation 23 --
-- Generation 24 --
-- Generation 25 --
-- Generation 26 --
-- Generation 27 --
-- Generation 28 --
-- Generation 29 --
-- Generation 30 --
-- Generation 31 --
-- Generation 32 --
-- Generation 33 --
-- Generation 34 --
-- Generation 35 --
-- Generation 36 --
-- Generation 37 --
-- Generation 38 --
-- Generation 39 --
-- Generation 40 --
-- Generation 41 --
-- Generation 42 --
-- Generation 43 --
-- Generation 44 --
-- Generation 45 --
-- Generation 46 --
-- Generation 47 --
-- Generation 48 --
-- Generation 49 --
-- Generation 50 --
-- Generation 51 --
-- Generation 52 --
-- Generation 53 --
-- Generation 54 --
-- Generation 55 --
-- Generation 56 --
-- Generation 57 --
-- Generation 58 --
-- Generation 59 --
-- Generation 60 --
-- Generation 61 --
-- Generation 62 --
-- Generation 63 --
-- Generation 64 --
-- Generation 65 --
-- Generation 66 --
-- Generation 67 --
-- Generation 68 --
-- Generation 69 --
-- Generation 70 --
-- Generation 71 --
-- Generation 72 --
-- Generation 73 --
-- Generation 74 --
-- Generation 75 --
-- Generation 76 --
-- Generation 77 --
-- Generation 78 --
-- Generation 79 --
-- Generation 80 --
-- Generation 81 --
-- Generation 82 --
-- Generation 83 --
-- Generation 84 --
-- Generation 85 --
-- Generation 86 --
-- Generation 87 --
-- Generation 88 --
-- Generation 89 --
-- Generation 90 --
-- Generation 91 --
-- Generation 92 --
-- Generation 93 --
-- Generation 94 --
-- Generation 95 --
-- Generation 96 --
-- Generation 97 --
-- Generation 98 --
-- Generation 99 --
-- Generation 100 --
-- Generation 101 --
-- Generation 102 --
-- Generation 103 --
-- Generation 104 --
-- Generation 105 --
-- Generation 106 --
-- Generation 107 --
-- Generation 108 --
-- Generation 109 --
-- Generation 110 --
-- Generation 111 --
-- Generation 112 --
-- Generation 113 --
-- Generation 114 --
-- Generation 115 --
-- Generation 116 --
-- Generation 117 --
-- Generation 118 --
-- Generation 119 --
-- Generation 120 --
-- Generation 121 --
-- Generation 122 --
-- Generation 123 --
-- Generation 124 --
-- Generation 125 --
-- Generation 126 --
-- Generation 127 --
-- Generation 128 --
-- Generation 129 --
-- Generation 130 --
-- Generation 131 --
-- Generation 132 --
-- Generation 133 --
-- Generation 134 --
-- Generation 135 --
-- Generation 136 --
-- Generation 137 --
-- Generation 138 --
-- Generation 139 --
-- Generation 140 --
-- Generation 141 --
-- Generation 142 --
-- Generation 143 --
-- Generation 144 --
-- Generation 145 --
-- Generation 146 --
-- Generation 147 --
-- Generation 148 --
-- Generation 149 --
-- Generation 150 --
-- Generation 151 --
-- Generation 152 --
-- Generation 153 --
-- Generation 154 --
-- Generation 155 --
-- Generation 156 --
-- Generation 157 --
-- Generation 158 --
-- Generation 159 --
-- Generation 160 --
-- Generation 161 --
-- Generation 162 --
-- Generation 163 --
-- Generation 164 --
-- Generation 165 --
-- Generation 166 --
-- Generation 167 --
-- Generation 168 --
-- Generation 169 --
-- Generation 170 --
-- Generation 171 --
-- Generation 172 --
-- Generation 173 --
-- Generation 174 --
-- Generation 175 --
-- Generation 176 --
-- Generation 177 --
-- Generation 178 --
-- Generation 179 --
-- Generation 180 --
-- Generation 181 --
-- Generation 182 --
-- Generation 183 --
-- Generation 184 --
-- Generation 185 --
-- Generation 186 --
-- Generation 187 --
-- Generation 188 --
-- Generation 189 --
-- Generation 190 --
-- Generation 191 --
-- Generation 192 --
-- Generation 193 --
-- Generation 194 --
-- Generation 195 --
-- Generation 196 --
-- Generation 197 --
-- Generation 198 --
-- Generation 199 --
-- Generation 200 --
-- Generation 201 --
-- Generation 202 --
-- Generation 203 --
-- Generation 204 --
-- Generation 205 --
-- Generation 206 --
-- Generation 207 --
-- Generation 208 --
-- Generation 209 --
-- Generation 210 --
-- Generation 211 --
-- Generation 212 --
-- Generation 213 --
-- Generation 214 --
-- Generation 215 --
-- Generation 216 --
-- Generation 217 --
-- Generation 218 --
-- Generation 219 --
-- Generation 220 --
-- Generation 221 --
-- Generation 222 --
-- Generation 223 --
-- Generation 224 --
-- Generation 225 --
-- Generation 226 --
-- Generation 227 --
-- Generation 228 --
-- Generation 229 --
-- Generation 230 --
-- Generation 231 --
-- Generation 232 --
-- Generation 233 --
-- Generation 234 --
-- Generation 235 --
-- Generation 236 --
-- Generation 237 --
-- Generation 238 --
-- Generation 239 --
-- Generation 240 --
-- Generation 241 --
-- Generation 242 --
-- Generation 243 --
-- Generation 244 --
-- Generation 245 --
-- Generation 246 --
-- Generation 247 --
-- Generation 248 --
-- Generation 249 --
-- Generation 250 --
-- Generation 251 --
-- Generation 252 --
-- Generation 253 --
-- Generation 254 --
-- Generation 255 --
-- Generation 256 --
-- Generation 257 --
-- Generation 258 --
-- Generation 259 --
-- Generation 260 --
-- Generation 261 --
-- Generation 262 --
-- Generation 263 --
-- Generation 264 --
-- Generation 265 --
-- Generation 266 --
-- Generation 267 --
-- Generation 268 --
-- Generation 269 --
-- Generation 270 --
-- Generation 271 --
-- Generation 272 --
-- Generation 273 --
-- Generation 274 --
-- Generation 275 --
-- Generation 276 --
-- Generation 277 --
-- Generation 278 --
-- Generation 279 --
-- Generation 280 --
-- Generation 281 --
-- Generation 282 --
-- Generation 283 --
-- Generation 284 --
-- Generation 285 --
-- Generation 286 --
-- Generation 287 --
-- Generation 288 --
-- Generation 289 --
-- Generation 290 --
-- Generation 291 --
-- Generation 292 --
-- Generation 293 --
-- Generation 294 --
-- Generation 295 --
-- Generation 296 --
-- Generation 297 --
-- Generation 298 --
-- Generation 299 --
-- Generation 300 --
-- Generation 301 --
-- Generation 302 --
-- Generation 303 --
-- Generation 304 --
-- Generation 305 --
-- Generation 306 --
-- Generation 307 --
-- Generation 308 --
-- Generation 309 --
-- Generation 310 --
-- Generation 311 --
-- Generation 312 --
-- Generation 313 --
-- Generation 314 --
-- Generation 315 --
-- Generation 316 --
-- Generation 317 --
-- Generation 318 --
-- Generation 319 --
-- Generation 320 --
-- Generation 321 --
-- Generation 322 --
-- Generation 323 --
-- Generation 324 --
-- Generation 325 --
-- Generation 326 --
-- Generation 327 --
-- Generation 328 --
-- Generation 329 --
-- Generation 330 --
-- Generation 331 --
-- Generation 332 --
-- Generation 333 --
-- Generation 334 --
-- Generation 335 --
-- Generation 336 --
-- Generation 337 --
-- Generation 338 --
-- Generation 339 --
-- Generation 340 --
-- Generation 341 --
-- Generation 342 --
-- Generation 343 --
-- Generation 344 --
-- Generation 345 --
-- Generation 346 --
-- Generation 347 --
-- Generation 348 --
-- Generation 349 --
-- Generation 350 --
-- End of (successful) evolution --
                       Benchmark  Instance #  Cluster #    so-time
0  ICELL8_SE_A_kallisto_umap.csv         571          4  33.348914
Max memory consumption for Job 1783214 on host comp-24-4 is: 941449216.0B
